// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title SimpleAIONVault - Demo Version
 * @notice Simplified vault for Kiro Hackathon demo
 * @dev Generated by AION AI with Kiro IDE
 */

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";

contract SimpleAIONVault is Ownable, ReentrancyGuard {
    
    // State variables
    mapping(address => uint256) public balances;
    uint256 public totalDeposits;
    address public aiAgent;
    
    // Events
    event Deposited(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount);
    event AIAction(string action, uint256 value);
    
    // Modifiers
    modifier onlyAIAgent() {
        require(msg.sender == aiAgent, "Not authorized");
        _;
    }
    
    constructor() Ownable(msg.sender) {
        aiAgent = msg.sender;
    }
    
    /**
     * @notice Deposit BNB into the vault
     * @dev Simple deposit function for demo
     */
    function deposit() external payable nonReentrant {
        require(msg.value > 0, "Amount must be greater than 0");
        
        balances[msg.sender] += msg.value;
        totalDeposits += msg.value;
        
        emit Deposited(msg.sender, msg.value);
        
        // Trigger AI optimization (demo)
        emit AIAction("deposit_optimization", msg.value);
    }
    
    /**
     * @notice Withdraw BNB from the vault
     * @param amount Amount to withdraw
     */
    function withdraw(uint256 amount) external nonReentrant {
        require(amount > 0, "Invalid amount");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        balances[msg.sender] -= amount;
        totalDeposits -= amount;
        
        payable(msg.sender).transfer(amount);
        
        emit Withdrawn(msg.sender, amount);
        emit AIAction("withdraw_processed", amount);
    }
    
    /**
     * @notice AI-powered strategy optimization
     * @dev Only AI agent can call this
     */
    function optimizeStrategy() external onlyAIAgent {
        // AI optimization logic (demo)
        emit AIAction("strategy_optimized", totalDeposits);
    }
    
    /**
     * @notice Get user balance
     * @param user User address
     * @return User's balance
     */
    function getBalance(address user) external view returns (uint256) {
        return balances[user];
    }
    
    /**
     * @notice Get total vault value
     * @return Total deposits in the vault
     */
    function getTotalValue() external view returns (uint256) {
        return totalDeposits;
    }
    
    /**
     * @notice Set AI agent address
     * @param _aiAgent New AI agent address
     */
    function setAIAgent(address _aiAgent) external onlyOwner {
        aiAgent = _aiAgent;
    }
    
    /**
     * @notice Emergency withdraw (owner only)
     */
    function emergencyWithdraw() external onlyOwner {
        uint256 balance = address(this).balance;
        payable(owner()).transfer(balance);
    }
    
    // Receive function to accept BNB
    receive() external payable {
        // Auto-deposit received BNB
        balances[msg.sender] += msg.value;
        totalDeposits += msg.value;
        emit Deposited(msg.sender, msg.value);
    }
}