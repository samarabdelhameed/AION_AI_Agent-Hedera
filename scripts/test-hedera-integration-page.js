#!/usr/bin/env node

/**
 * @fileoverview Hedera Integration Page Test Script
 * @description Comprehensive testing for the enhanced Hedera integration page
 * @author AION Team
 * @version 2.0.0
 */

const puppeteer = require('puppeteer');
const chalk = require('chalk');
const fs = require('fs').promises;

class HederaIntegrationTester {
    constructor(baseURL = 'http://localhost:3001') {
        this.baseURL = baseURL;
        this.browser = null;
        this.page = null;
        
        this.testResults = {
            passed: 0,
            failed: 0,
            total: 0,
            sections: {},
            details: []
        };
    }

    /**
     * Log test result
     */
    logResult(testName, success, section = 'general', details = '') {
        this.testResults.total++;
        
        if (!this.testResults.sections[section]) {\n            this.testResults.sections[section] = { passed: 0, failed: 0, total: 0 };\n        }\n        \n        this.testResults.sections[section].total++;\n        \n        if (success) {\n            this.testResults.passed++;\n            this.testResults.sections[section].passed++;\n            console.log(chalk.green(`✓ [${section.toUpperCase()}] ${testName}`));\n        } else {\n            this.testResults.failed++;\n            this.testResults.sections[section].failed++;\n            console.log(chalk.red(`✗ [${section.toUpperCase()}] ${testName}`));\n            if (details) {\n                console.log(chalk.red(`  Error: ${details}`));\n            }\n        }\n        \n        this.testResults.details.push({\n            test: testName,\n            section: section,\n            success: success,\n            details: details,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    /**\n     * Initialize browser and page\n     */\n    async initialize() {\n        console.log(chalk.blue('🚀 Initializing browser for Hedera integration testing...'));\n        \n        this.browser = await puppeteer.launch({\n            headless: false,\n            defaultViewport: { width: 1920, height: 1080 },\n            args: ['--no-sandbox', '--disable-setuid-sandbox']\n        });\n        \n        this.page = await this.browser.newPage();\n        \n        // Enable console logging\n        this.page.on('console', msg => {\n            if (msg.type() === 'error') {\n                console.log(chalk.red(`Browser Error: ${msg.text()}`));\n            }\n        });\n        \n        this.page.on('pageerror', error => {\n            console.log(chalk.red(`Page Error: ${error.message}`));\n        });\n    }\n\n    /**\n     * Test page loading\n     */\n    async testPageLoading() {\n        console.log(chalk.blue('\\n=== Testing Page Loading ==='));\n\n        try {\n            await this.page.goto(`${this.baseURL}/hedera`, { \n                waitUntil: 'networkidle0',\n                timeout: 30000 \n            });\n\n            // Check if page loaded\n            const title = await this.page.title();\n            this.logResult(\n                'Hedera integration page loads',\n                title.includes('Hedera Integration'),\n                'loading',\n                title ? `Title: ${title}` : 'No title found'\n            );\n\n            // Check for main heading\n            const heading = await this.page.$eval('h1', el => el.textContent).catch(() => null);\n            this.logResult(\n                'Page heading present',\n                heading && heading.includes('Hedera Integration'),\n                'loading',\n                heading ? `Heading: ${heading}` : 'No heading found'\n            );\n\n            // Check for live demo badge\n            const liveBadge = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Live Demo')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Live demo badge present',\n                liveBadge,\n                'loading'\n            );\n\n        } catch (error) {\n            this.logResult(\n                'Page loading failed',\n                false,\n                'loading',\n                error.message\n            );\n        }\n    }\n\n    /**\n     * Test key benefits section\n     */\n    async testKeyBenefits() {\n        console.log(chalk.blue('\\n=== Testing Key Benefits ==='));\n\n        try {\n            // Check for uptime metric\n            const uptimeMetric = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('99.8% Uptime')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Uptime metric displayed',\n                uptimeMetric,\n                'benefits'\n            );\n\n            // Check for latency metric\n            const latencyMetric = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('2.1s Latency')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Latency metric displayed',\n                latencyMetric,\n                'benefits'\n            );\n\n            // Check for cost metric\n            const costMetric = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('$0.0001')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Cost metric displayed',\n                costMetric,\n                'benefits'\n            );\n\n            // Check for real-time indicator\n            const realtimeMetric = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Real-time')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Real-time metric displayed',\n                realtimeMetric,\n                'benefits'\n            );\n\n        } catch (error) {\n            this.logResult(\n                'Key benefits test failed',\n                false,\n                'benefits',\n                error.message\n            );\n        }\n    }\n\n    /**\n     * Test demo scenarios\n     */\n    async testDemoScenarios() {\n        console.log(chalk.blue('\\n=== Testing Demo Scenarios ==='));\n\n        try {\n            // Check for demo section\n            const demoSection = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Interactive Demo for Judges')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Demo section present',\n                demoSection,\n                'demo'\n            );\n\n            // Check for AI Decision demo button\n            const aiDemoButton = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('button');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('AI Decision Logging')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'AI Decision demo button present',\n                aiDemoButton,\n                'demo'\n            );\n\n            // Check for Token Operations demo button\n            const tokenDemoButton = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('button');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('HTS Token Operations')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Token Operations demo button present',\n                tokenDemoButton,\n                'demo'\n            );\n\n            // Check for Cross-Chain demo button\n            const crossChainButton = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('button');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Cross-Chain Bridge')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Cross-Chain demo button present',\n                crossChainButton,\n                'demo'\n            );\n\n            // Check for Performance Analytics demo button\n            const performanceButton = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('button');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Performance Analytics')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Performance Analytics demo button present',\n                performanceButton,\n                'demo'\n            );\n\n        } catch (error) {\n            this.logResult(\n                'Demo scenarios test failed',\n                false,\n                'demo',\n                error.message\n            );\n        }\n    }\n\n    /**\n     * Test tab navigation\n     */\n    async testTabNavigation() {\n        console.log(chalk.blue('\\n=== Testing Tab Navigation ==='));\n\n        try {\n            // Wait for tabs to load\n            await this.page.waitForSelector('[role=\"tab\"], button[data-state]', { timeout: 10000 });\n\n            const tabs = await this.page.$$('[role=\"tab\"], button[data-state]');\n            this.logResult(\n                'Tab navigation present',\n                tabs.length >= 6,\n                'navigation',\n                `Found ${tabs.length} tabs`\n            );\n\n            // Test clicking different tabs\n            const tabNames = ['Overview', 'Services', 'Token', 'AI Decisions', 'Explorers', 'Diagnostics'];\n            \n            for (const tabName of tabNames) {\n                try {\n                    const tabButton = await this.page.evaluate((name) => {\n                        const buttons = document.querySelectorAll('button');\n                        for (let button of buttons) {\n                            if (button.textContent && button.textContent.includes(name)) {\n                                button.click();\n                                return true;\n                            }\n                        }\n                        return false;\n                    }, tabName);\n\n                    if (tabButton) {\n                        await this.page.waitForTimeout(500);\n                        this.logResult(\n                            `${tabName} tab clickable`,\n                            true,\n                            'navigation'\n                        );\n                    } else {\n                        this.logResult(\n                            `${tabName} tab not found`,\n                            false,\n                            'navigation'\n                        );\n                    }\n                } catch (error) {\n                    this.logResult(\n                        `${tabName} tab click failed`,\n                        false,\n                        'navigation',\n                        error.message\n                    );\n                }\n            }\n\n        } catch (error) {\n            this.logResult(\n                'Tab navigation test failed',\n                false,\n                'navigation',\n                error.message\n            );\n        }\n    }\n\n    /**\n     * Test status overview cards\n     */\n    async testStatusOverview() {\n        console.log(chalk.blue('\\n=== Testing Status Overview ==='));\n\n        try {\n            // Check for Network Status card\n            const networkStatus = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Network Status')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Network Status card present',\n                networkStatus,\n                'status'\n            );\n\n            // Check for Active Nodes card\n            const activeNodes = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Active Nodes')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Active Nodes card present',\n                activeNodes,\n                'status'\n            );\n\n            // Check for Network TPS card\n            const networkTPS = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Network TPS')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Network TPS card present',\n                networkTPS,\n                'status'\n            );\n\n            // Check for Average Latency card\n            const avgLatency = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Avg Latency')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Average Latency card present',\n                avgLatency,\n                'status'\n            );\n\n        } catch (error) {\n            this.logResult(\n                'Status overview test failed',\n                false,\n                'status',\n                error.message\n            );\n        }\n    }\n\n    /**\n     * Test technical architecture section\n     */\n    async testTechnicalArchitecture() {\n        console.log(chalk.blue('\\n=== Testing Technical Architecture ==='));\n\n        try {\n            // Check for Technical Architecture section\n            const techSection = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Technical Architecture')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Technical Architecture section present',\n                techSection,\n                'architecture'\n            );\n\n            // Check for HCS description\n            const hcsDescription = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Hedera Consensus Service (HCS)')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'HCS architecture description present',\n                hcsDescription,\n                'architecture'\n            );\n\n            // Check for HTS description\n            const htsDescription = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('Hedera Token Service (HTS)')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'HTS architecture description present',\n                htsDescription,\n                'architecture'\n            );\n\n            // Check for AI Integration description\n            const aiDescription = await this.page.evaluate(() => {\n                const elements = document.querySelectorAll('*');\n                for (let el of elements) {\n                    if (el.textContent && el.textContent.includes('AI Integration Layer')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'AI Integration description present',\n                aiDescription,\n                'architecture'\n            );\n\n        } catch (error) {\n            this.logResult(\n                'Technical architecture test failed',\n                false,\n                'architecture',\n                error.message\n            );\n        }\n    }\n\n    /**\n     * Test interactive elements\n     */\n    async testInteractiveElements() {\n        console.log(chalk.blue('\\n=== Testing Interactive Elements ==='));\n\n        try {\n            // Check for refresh button\n            const refreshButton = await this.page.$('button:has-text(\"Refresh\")');\n            this.logResult(\n                'Refresh button present',\n                refreshButton !== null,\n                'interactive'\n            );\n\n            // Check for diagnostics button\n            const diagnosticsButton = await this.page.evaluate(() => {\n                const buttons = document.querySelectorAll('button');\n                for (let button of buttons) {\n                    if (button.textContent && button.textContent.includes('Diagnostics')) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            this.logResult(\n                'Diagnostics button present',\n                diagnosticsButton,\n                'interactive'\n            );\n\n            // Test demo button interaction\n            const demoButton = await this.page.evaluate(() => {\n                const buttons = document.querySelectorAll('button');\n                for (let button of buttons) {\n                    if (button.textContent && button.textContent.includes('AI Decision Logging')) {\n                        return button;\n                    }\n                }\n                return null;\n            });\n\n            if (demoButton) {\n                // Click the demo button\n                await this.page.evaluate(() => {\n                    const buttons = document.querySelectorAll('button');\n                    for (let button of buttons) {\n                        if (button.textContent && button.textContent.includes('AI Decision Logging')) {\n                            button.click();\n                            break;\n                        }\n                    }\n                });\n\n                // Wait a moment and check for loading state\n                await this.page.waitForTimeout(1000);\n                \n                const loadingState = await this.page.evaluate(() => {\n                    const elements = document.querySelectorAll('*');\n                    for (let el of elements) {\n                        if (el.textContent && (el.textContent.includes('Running...') || el.textContent.includes('⏳'))) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n\n                this.logResult(\n                    'Demo button shows loading state',\n                    loadingState,\n                    'interactive'\n                );\n            }\n\n        } catch (error) {\n            this.logResult(\n                'Interactive elements test failed',\n                false,\n                'interactive',\n                error.message\n            );\n        }\n    }\n\n    /**\n     * Run all tests\n     */\n    async runAllTests() {\n        console.log(chalk.blue('🧪 Starting Hedera Integration Page Tests...'));\n        console.log(chalk.gray(`Target URL: ${this.baseURL}/hedera`));\n        \n        try {\n            await this.initialize();\n            \n            // Run test suites\n            await this.testPageLoading();\n            await this.testKeyBenefits();\n            await this.testDemoScenarios();\n            await this.testTabNavigation();\n            await this.testStatusOverview();\n            await this.testTechnicalArchitecture();\n            await this.testInteractiveElements();\n            \n            // Print summary\n            this.printSummary();\n            \n            return this.testResults;\n            \n        } catch (error) {\n            console.error(chalk.red('Test execution failed:'), error);\n            throw error;\n        } finally {\n            if (this.browser) {\n                await this.browser.close();\n            }\n        }\n    }\n\n    /**\n     * Print summary\n     */\n    printSummary() {\n        console.log(chalk.blue('\\n' + '='.repeat(60)));\n        console.log(chalk.blue('              HEDERA INTEGRATION TEST SUMMARY'));\n        console.log(chalk.blue('='.repeat(60)));\n        \n        console.log(`\\n${chalk.cyan('Overall Results:')}`);\n        console.log(`  Total Tests: ${this.testResults.total}`);\n        console.log(`  ${chalk.green('Passed:')} ${this.testResults.passed}`);\n        console.log(`  ${chalk.red('Failed:')} ${this.testResults.failed}`);\n        console.log(`  Success Rate: ${((this.testResults.passed / this.testResults.total) * 100).toFixed(2)}%`);\n\n        console.log(`\\n${chalk.cyan('Results by Section:')}`);\n        Object.entries(this.testResults.sections).forEach(([section, results]) => {\n            const successRate = ((results.passed / results.total) * 100).toFixed(1);\n            const status = results.failed === 0 ? chalk.green('✓') : chalk.red('✗');\n            console.log(`  ${status} ${section.toUpperCase()}: ${results.passed}/${results.total} (${successRate}%)`);\n        });\n\n        if (this.testResults.failed > 0) {\n            console.log(`\\n${chalk.red('Failed Tests:')}`);\n            this.testResults.details\n                .filter(test => !test.success)\n                .forEach(test => {\n                    console.log(`  ${chalk.red('✗')} [${test.section.toUpperCase()}] ${test.test}`);\n                    if (test.details) {\n                        console.log(`    ${chalk.gray(test.details)}`);\n                    }\n                });\n        }\n\n        console.log(chalk.blue('\\n' + '='.repeat(60)));\n    }\n}\n\n// CLI execution\nif (require.main === module) {\n    const args = process.argv.slice(2);\n    const baseURL = args[0] || 'http://localhost:3001';\n    \n    const tester = new HederaIntegrationTester(baseURL);\n    \n    tester.runAllTests()\n        .then(report => {\n            const success = report.failed === 0;\n            process.exit(success ? 0 : 1);\n        })\n        .catch(error => {\n            console.error(chalk.red('Test suite failed:'), error);\n            process.exit(1);\n        });\n}\n\nmodule.exports = HederaIntegrationTester;